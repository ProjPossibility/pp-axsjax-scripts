// Copyright 2008 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview AxsJAX to enhance accessibility
 * of Skel.
 *
 * This is a skeleton AxsJAX script - when you start using it,
 * you should do a global replace of "axsFBRequests" with
 * "axsWhateverYourAppNameIs" and update this fileoverview.
 *
 * @author clchen@google.com (Charles L. Chen)
 */
// create namespace
var axsFBRequests = {};

/**
 * These are strings to be spoken to the user
 * @type string
 */
axsFBRequests.HELP = 'The following shortcut keys are available. ';


/**
 * The AxsJAX object that will do the tickling and speaking.
 * @type AxsJAX?
 */
axsFBRequests.axsJAXObj = null;
/**
 * The AxsNav object that will handle navigation.
 * @type AxsNav?
 */
axsFBRequests.axsNavObj = null;

/**
 * The AxsSound object that will play earcons
 * @type AxsSound?
 */
axsFBRequests.axsSoundObj = null;

/**
 * The PowerKey object that will provide a quick search
 * @type PowerKey?
 */
axsFBRequests.pkObj = null;

/**
 * The AxsLens object that will magnify content.
 * @type AxsLens?
 */
axsFBRequests.axsLensObj = null;

/**
 * The magnification factor for the AxsLens object.
 * @type number
 */
axsFBRequests.magSize = 1.5;

/**
 * Initializes the AxsJAX script
 */
axsFBRequests.init = function(){
  axsFBRequests.axsJAXObj = new AxsJAX(true);
  axsFBRequests.axsNavObj = new AxsNav(axsFBRequests.axsJAXObj);

  //Add event listeners
  document.addEventListener('DOMNodeInserted',
                            axsFBRequests.nodeInsertedHandler,
                            true);
  document.addEventListener('DOMAttrModified',
                            axsFBRequests.attrModifiedHandler,
                            true);
  document.addEventListener('keypress', axsFBRequests.keyHandler, true);

  var cnrString = '<cnr next="RIGHT l" prev="LEFT h" comment="Mix and match t' +
                  'he examples below to suit the page that you are working on' +
                  '.">' +
                  '' +
                  '  <list title="Simple list with a hotkey that causes the ' +
                  'user to jump directly to this list" hotkey="h" next="DOWN ' +
                  'j" prev="UP k" onEmpty="The simple list with a hotkey is n' +
                  'ot available.">' +
                  '' +
                  '    <item action="CALL:speakEventRequests">' +
                  "      /html[@id='facebook']/body/div[@id='nonfooter']/div" +
                  "[@id='page_height']/div[@id='content']/div/div[2]/div[1]/d" +
                  "iv/div[@id='event_invite']/div[@id]/table/tbody/tr/td[2]" +
                  '    </item>' +
                  '  </list>' +
                  '</cnr>';

  axsFBRequests.axsNavObj.navInit(cnrString, null);

  axsFBRequests.axsLensObj = new AxsLens(axsFBRequests.axsJAXObj);
  axsFBRequests.axsNavObj.setLens(axsFBRequests.axsLensObj);
  axsFBRequests.axsLensObj.setMagnification(axsFBRequests.magSize);

  axsFBRequests.axsSoundObj = new AxsSound(true);
  axsFBRequests.axsNavObj.setSound(axsFBRequests.axsSoundObj);

  axsFBRequests.pkObj = new PowerKey('available actions', axsFBRequests.axsJAXObj);
  axsFBRequests.axsNavObj.setPowerKey(axsFBRequests.pkObj, '.');

  //Delete the next line when you are done with your script.
};

/**
 * Handler for DOMNodeInserted events.
 * @param {Object} evt A DOMNodeInserted event.
 */
axsFBRequests.nodeInsertedHandler = function(evt){
  var target = evt.target;
  // If the target node is something that should
  // be spoken, speak it here.
};

/**
 * Handler for DOMAttrModified events.
 * @param {Object} evt A DOMAttrModified event.
 */
axsFBRequests.attrModifiedHandler = function(evt){
  var attrib = evt.attrName;
  var newVal = evt.newValue;
  var oldVal = evt.prevValue;
  var target = evt.target;
  // If the target node is something that should
  // be spoken, speak it here.
};

/**
 * Handler for key events.
 * @param {Object} evt A keypress event.
 * @return {boolean} If true, the event should be propagated.
 */
axsFBRequests.keyHandler = function(evt){
  //If Ctrl is held, it must be for some AT.
  if (evt.ctrlKey) return true;

  if (evt.keyCode == 27){ // ESC
    axsFBRequests.axsJAXObj.lastFocusedNode.blur();
    return false;
  }

  if (axsFBRequests.axsJAXObj.inputFocused) return true;

  var command = axsFBRequests.keyCodeMap[evt.keyCode] ||
                axsFBRequests.charCodeMap[evt.charCode];

  if (command) return command();

  return true;
};

/**
 * Map from key codes to functions
 */
axsFBRequests.keyCodeMap = {
  // Map additional keyboard behavior that involves key codes here
};

/**
 * Map from character codes to functions
 * @return {boolean} Always returns false to indicate
 *                   that the keycode has been handled.
 */
axsFBRequests.charCodeMap = {
  // Map additional keyboard behavior that involves char codes here
  // - (minus symbol)
  45 : function() {
         axsFBRequests.magSize -= 0.10;
         axsFBRequests.axsLensObj.setMagnification(axsFBRequests.magSize);
         return false;
       },
  // = (equal symbol)
  61 : function() {
         axsFBRequests.magSize += 0.10;
         axsFBRequests.axsLensObj.setMagnification(axsFBRequests.magSize);
         return false;
       },
  // ? (question mark)
  63 : function() {
         var helpStr = axsFBRequests.HELP +
                       axsFBRequests.axsNavObj.localHelpString() +
                       axsFBRequests.axsNavObj.globalHelpString();
         axsFBRequests.axsJAXObj.speakTextViaNode(helpStr);
         return false;
       }
};

function speakEventRequests(currentElement)
{
    var resultRow = currentElement.elem;
    
    var senderName = axsFBRequests.axsJAXObj.evalXPath('./div[1]/a',currentElement.elem)[0];
    var eventName  = axsFBRequests.axsJAXObj.evalXPath('./b/a',currentElement.elem)[0];
    var finalMessage = senderName.innerHTML + ' . ' + 'has invited you to' + ' . ' + eventName.innerHTML;
    //axsFBRequests.axsLensObj.view(resultRow);
  //resultRow.scrollIntoView(true);
    axsFBRequests.axsJAXObj.speakText(finalMessage);     //Speak the login box name intelligently
}

axsFBRequests.init();


